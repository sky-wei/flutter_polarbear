// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../data/entity/account_entity.dart';
import '../data/entity/admin_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 3794600116205394141),
      name: 'AccountEntity',
      lastPropertyId: const IdUid(7, 6006231401803495708),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7583400253848830794),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 5191721476177836993),
            name: 'adminId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2255615261186030690),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7616446031891535671),
            name: 'password',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 149919727219829319),
            name: 'url',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4943695338367849786),
            name: 'desc',
            type: 9,
            flags: 8,
            indexId: const IdUid(1, 1363469224511050915)),
        ModelProperty(
            id: const IdUid(7, 6006231401803495708),
            name: 'createTime',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 4465267462032372863),
      name: 'AdminEntity',
      lastPropertyId: const IdUid(5, 3012214465594858398),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8144620152015228265),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 6098745068126634708),
            name: 'name',
            type: 9,
            flags: 2080,
            indexId: const IdUid(2, 4491586781368162482)),
        ModelProperty(
            id: const IdUid(3, 8915299980353788700),
            name: 'password',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4494322952139086734),
            name: 'desc',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3012214465594858398),
            name: 'createTime',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 4465267462032372863),
      lastIndexId: const IdUid(2, 4491586781368162482),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    AccountEntity: EntityDefinition<AccountEntity>(
        model: _entities[0],
        toOneRelations: (AccountEntity object) => [],
        toManyRelations: (AccountEntity object) => {},
        getId: (AccountEntity object) => object.id,
        setId: (AccountEntity object, int id) {
          object.id = id;
        },
        objectToFB: (AccountEntity object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final passwordOffset = fbb.writeString(object.password);
          final urlOffset = fbb.writeString(object.url);
          final descOffset = fbb.writeString(object.desc);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.adminId);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, passwordOffset);
          fbb.addOffset(4, urlOffset);
          fbb.addOffset(5, descOffset);
          fbb.addInt64(6, object.createTime);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = AccountEntity(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              adminId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              password: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              url: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              desc: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              createTime:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0));

          return object;
        }),
    AdminEntity: EntityDefinition<AdminEntity>(
        model: _entities[1],
        toOneRelations: (AdminEntity object) => [],
        toManyRelations: (AdminEntity object) => {},
        getId: (AdminEntity object) => object.id,
        setId: (AdminEntity object, int id) {
          object.id = id;
        },
        objectToFB: (AdminEntity object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final passwordOffset = fbb.writeString(object.password);
          final descOffset = fbb.writeString(object.desc);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, passwordOffset);
          fbb.addOffset(3, descOffset);
          fbb.addInt64(4, object.createTime);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = AdminEntity(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              password: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              desc: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              createTime:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [AccountEntity] entity fields to define ObjectBox queries.
class AccountEntity_ {
  /// see [AccountEntity.id]
  static final id =
      QueryIntegerProperty<AccountEntity>(_entities[0].properties[0]);

  /// see [AccountEntity.adminId]
  static final adminId =
      QueryIntegerProperty<AccountEntity>(_entities[0].properties[1]);

  /// see [AccountEntity.name]
  static final name =
      QueryStringProperty<AccountEntity>(_entities[0].properties[2]);

  /// see [AccountEntity.password]
  static final password =
      QueryStringProperty<AccountEntity>(_entities[0].properties[3]);

  /// see [AccountEntity.url]
  static final url =
      QueryStringProperty<AccountEntity>(_entities[0].properties[4]);

  /// see [AccountEntity.desc]
  static final desc =
      QueryStringProperty<AccountEntity>(_entities[0].properties[5]);

  /// see [AccountEntity.createTime]
  static final createTime =
      QueryIntegerProperty<AccountEntity>(_entities[0].properties[6]);
}

/// [AdminEntity] entity fields to define ObjectBox queries.
class AdminEntity_ {
  /// see [AdminEntity.id]
  static final id =
      QueryIntegerProperty<AdminEntity>(_entities[1].properties[0]);

  /// see [AdminEntity.name]
  static final name =
      QueryStringProperty<AdminEntity>(_entities[1].properties[1]);

  /// see [AdminEntity.password]
  static final password =
      QueryStringProperty<AdminEntity>(_entities[1].properties[2]);

  /// see [AdminEntity.desc]
  static final desc =
      QueryStringProperty<AdminEntity>(_entities[1].properties[3]);

  /// see [AdminEntity.createTime]
  static final createTime =
      QueryIntegerProperty<AdminEntity>(_entities[1].properties[4]);
}
